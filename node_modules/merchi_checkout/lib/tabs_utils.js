function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { isProductSupplierMOD } from './utils';
import { faAddressCard, faCheckCircle, faCreditCard, faShoppingCart, faThumbsUp, faTruck } from '@fortawesome/free-solid-svg-icons';
function makeTabData(icon, id, title) {
  return {
    disabled: true,
    icon: icon,
    id: id,
    title: title
  };
}
export var tabIdCustomerInfo = 'customer';
export var tabCustomerInfo = makeTabData(faAddressCard, tabIdCustomerInfo, 'Customer');
export var tabIdShipment = 'shipment';
export var tabShipment = makeTabData(faTruck, tabIdShipment, 'Address');
export var tabIdConfirm = 'confirm';
export var tabConfirm = makeTabData(faShoppingCart, tabIdConfirm, 'Confirm');
export var tabMODConfirm = makeTabData(faCheckCircle, tabIdConfirm, 'Confirm');
export var tabIdPayment = 'payment';
export var tabPayment = makeTabData(faCreditCard, tabIdPayment, 'Checkout');
export var tabIdComplete = 'complete';
export var tabCompleteQuote = makeTabData(faThumbsUp, tabIdComplete, 'Submitted');
export var tabComplete = makeTabData(faThumbsUp, tabIdComplete, 'Complete');
export function tabsProductMOD(_ref) {
  var includeDomainSignup = _ref.includeDomainSignup,
    job = _ref.job;
  var client = job.client,
    product = job.product;
  var hasClient = client && client.id > 0;
  var clientHasDomain = client && client.hasStore;
  var tabs = {};
  var needsDrafting = product.needsDrafting;
  // if the current user doesn't have an account ask them to sign up
  if (!hasClient) {
    tabs[tabIdCustomerInfo] = needsDrafting ? tabCustomerInfo : _objectSpread(_objectSpread({}, tabCustomerInfo), {}, {
      disabled: false
    });
  }
  // if the current user doesn't have domain ask them to make a domain
  // if (!clientHasDomain && includeDomainSignup) {
  //   tabs[tabIdNewDomain] =
  //     hasClient ?
  //       {...tabNewDomain, disabled: needsDrafting} :
  //       tabNewDomain;
  // }
  tabs[tabIdConfirm] = tabMODConfirm;
  tabs[tabIdComplete] = tabCompleteQuote;
  return tabs;
}
export function tabsProductSupplier(_ref2) {
  var includeDomainSignup = _ref2.includeDomainSignup,
    job = _ref2.job,
    isBuyRequest = _ref2.isBuyRequest;
  var client = job.client,
    product = job.product;
  var tabs = {};
  var hasClient = client && client.id > 0;
  var needsDrafting = product.needsDrafting,
    needsShipping = product.needsShipping;
  // if the current user doesn't have an account ask them to sign up
  tabs[tabIdCustomerInfo] = needsDrafting ? tabCustomerInfo : _objectSpread(_objectSpread({}, tabCustomerInfo), {}, {
    disabled: false
  });
  if (needsShipping) {
    tabs[tabIdShipment] = _objectSpread(_objectSpread({}, tabShipment), {}, {
      disabled: !hasClient || needsDrafting
    });
  }
  tabs[tabIdConfirm] = _objectSpread(_objectSpread({}, tabConfirm), {}, {
    disabled: !hasClient || needsDrafting || needsShipping
  });
  if (isBuyRequest) {
    tabs[tabIdPayment] = tabPayment;
    tabs[tabIdComplete] = tabComplete;
  } else {
    tabs[tabIdComplete] = tabCompleteQuote;
  }
  return tabs;
}
export function tabsInit(settings) {
  var includeDomainSignup = settings.includeDomainSignup,
    _settings$isBuyReques = settings.isBuyRequest,
    isBuyRequest = _settings$isBuyReques === void 0 ? false : _settings$isBuyReques,
    job = settings.job;
  var product = job.product;
  var isSupplierMOD = isProductSupplierMOD(product);
  if (isSupplierMOD) {
    return Object.values(tabsProductMOD({
      includeDomainSignup: includeDomainSignup,
      job: job
    }));
  }
  return Object.values(tabsProductSupplier({
    includeDomainSignup: includeDomainSignup,
    isBuyRequest: isBuyRequest,
    job: job
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,