'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useEffect, useRef } from 'react';
import Geosuggest from 'react-geosuggest';
import { CountryDropdown, RegionDropdown } from 'react-country-region-selector';
import { Controller } from 'react-hook-form';
import InputText from './InputText';
import { useMerchiCheckboutContext } from '../MerchiCheckoutProvider';
import { addressInOneLine, geoSuggestResultAsNewAddress } from '../../utils';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTimes, faEdit, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';
import { useState } from 'react';
import Collapse from '../Collapse';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
export function InputsAddress(_ref) {
  var _ref$defaultAddress = _ref.defaultAddress,
    defaultAddress = _ref$defaultAddress === void 0 ? {} : _ref$defaultAddress,
    _ref$labelGeoSuggest = _ref.labelGeoSuggest,
    labelGeoSuggest = _ref$labelGeoSuggest === void 0 ? 'Address' : _ref$labelGeoSuggest,
    hookForm = _ref.hookForm,
    name = _ref.name,
    _ref$placeholder = _ref.placeholder,
    placeholder = _ref$placeholder === void 0 ? 'Search your address' : _ref$placeholder,
    updateAddress = _ref.updateAddress;
  var geosuggestEl = useRef(null);
  var _useMerchiCheckboutCo = useMerchiCheckboutContext(),
    googlePlacesLoaded = _useMerchiCheckboutCo.googlePlacesLoaded,
    classNameMerchiCheckoutFormGroup = _useMerchiCheckboutCo.classNameMerchiCheckoutFormGroup,
    classNameMerchiCheckoutFormInput = _useMerchiCheckboutCo.classNameMerchiCheckoutFormInput,
    classNameMerchiCheckoutRow = _useMerchiCheckboutCo.classNameMerchiCheckoutRow,
    classNameMerchiCheckoutRowColumn = _useMerchiCheckboutCo.classNameMerchiCheckoutRowColumn,
    classNameMerchiCheckoutGoogleSuggestList = _useMerchiCheckboutCo.classNameMerchiCheckoutGoogleSuggestList,
    classNameMerchiCheckoutGoogleSuggestListItem = _useMerchiCheckboutCo.classNameMerchiCheckoutGoogleSuggestListItem;
  var control = hookForm.control,
    _hookForm$formState = hookForm.formState,
    errors = _hookForm$formState.errors,
    isValid = _hookForm$formState.isValid,
    submitCount = _hookForm$formState.submitCount,
    setValue = hookForm.setValue,
    getValues = hookForm.getValues;
  var inputName = function inputName(_name) {
    return "".concat(name ? "".concat(name, ".") : '').concat(_name);
  };
  function onSuggestSelect(suggest) {
    if (suggest) {
      updateAddress(geoSuggestResultAsNewAddress(suggest));
    } else {
      updateAddress({
        city: '',
        country: '',
        lineOne: '',
        lineTwo: '',
        postcode: '',
        state: ''
      });
    }
    geosuggestEl.current.blur();
  }
  function onChangeCountryState() {
    var addr = getValues();
    updateAddress(addr[name]);
  }
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    addressFieldsOpen = _useState2[0],
    setAddressFieldsOpen = _useState2[1];
  var toggleAddressFieldsOpen = function toggleAddressFieldsOpen() {
    return setAddressFieldsOpen(!addressFieldsOpen);
  };
  useEffect(function () {
    if (!isValid && !addressFieldsOpen && submitCount > 0) {
      toggleAddressFieldsOpen();
    }
  }, [isValid, submitCount]);
  var addressForm = /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsx(InputText, {
      control: control,
      label: "Address line one",
      name: inputName("lineOne"),
      placeholder: "123 Fake st",
      rules: {
        required: 'Address line one is required.'
      }
    }), /*#__PURE__*/_jsx(InputText, {
      control: control,
      label: "Continue address",
      name: inputName("lineTwo"),
      placeholder: "Continue address..."
    }), /*#__PURE__*/_jsxs("div", {
      className: classNameMerchiCheckoutRow,
      children: [/*#__PURE__*/_jsx("div", {
        className: classNameMerchiCheckoutRowColumn,
        children: /*#__PURE__*/_jsx(InputText, {
          control: control,
          label: "City / Province",
          name: inputName("city"),
          placeholder: "City",
          rules: {
            required: 'City / Province is required.'
          }
        })
      }), /*#__PURE__*/_jsx("div", {
        className: classNameMerchiCheckoutRowColumn,
        children: /*#__PURE__*/_jsx(InputText, {
          control: control,
          label: "Post / Zip code",
          name: inputName("postcode"),
          placeholder: "90210"
        })
      })]
    }), /*#__PURE__*/_jsxs("div", {
      className: classNameMerchiCheckoutRow,
      children: [/*#__PURE__*/_jsx("div", {
        className: classNameMerchiCheckoutRowColumn,
        children: /*#__PURE__*/_jsxs("div", {
          className: classNameMerchiCheckoutFormGroup,
          children: [/*#__PURE__*/_jsx("label", {
            children: "Country"
          }), /*#__PURE__*/_jsx(Controller, {
            name: inputName("country"),
            control: control,
            defaultValue: defaultAddress && defaultAddress.country,
            render: function render(_ref2) {
              var field = _ref2.field;
              return /*#__PURE__*/_jsx(CountryDropdown, _objectSpread(_objectSpread({}, field), {}, {
                // value={defaultAddress && defaultAddress.country}
                classes: classNameMerchiCheckoutFormInput,
                onChange: function onChange(val) {
                  setValue(inputName("country"), val);
                  field.onChange(val);
                  onChangeCountryState();
                },
                valueType: "short"
              }));
            }
          })]
        })
      }), /*#__PURE__*/_jsx("div", {
        className: classNameMerchiCheckoutRowColumn,
        children: /*#__PURE__*/_jsxs("div", {
          className: classNameMerchiCheckoutFormGroup,
          children: [/*#__PURE__*/_jsx("label", {
            children: "State / Region"
          }), /*#__PURE__*/_jsx(Controller, {
            name: inputName("state"),
            control: control,
            defaultValue: defaultAddress && defaultAddress.state,
            render: function render(_ref3) {
              var field = _ref3.field;
              return /*#__PURE__*/_jsx(RegionDropdown, _objectSpread(_objectSpread({}, field), {}, {
                // value={defaultAddress && defaultAddress.state}
                countryValueType: "short",
                country: getValues(inputName("country")),
                classes: classNameMerchiCheckoutFormInput,
                onChange: function onChange(val) {
                  setValue(inputName("state"), val);
                  field.onChange(val);
                  onChangeCountryState();
                },
                valueType: "short"
              }));
            }
          })]
        })
      })]
    })]
  });
  return /*#__PURE__*/_jsx(_Fragment, {
    children: googlePlacesLoaded ? /*#__PURE__*/_jsxs(_Fragment, {
      children: [/*#__PURE__*/_jsxs("div", {
        className: classNameMerchiCheckoutFormGroup,
        children: [/*#__PURE__*/_jsx("label", {
          children: labelGeoSuggest
        }), /*#__PURE__*/_jsx(Geosuggest, {
          ref: geosuggestEl,
          style: {
            input: {
              '::placeholder': {
                color: '#525f7f'
              }
            }
          },
          initialValue: addressInOneLine(defaultAddress),
          inputClassName: classNameMerchiCheckoutFormInput,
          onSuggestSelect: onSuggestSelect,
          placeholder: placeholder,
          suggestsClassName: classNameMerchiCheckoutGoogleSuggestList,
          suggestItemClassName: classNameMerchiCheckoutGoogleSuggestListItem,
          types: ['establishment', 'geocode']
        })]
      }), /*#__PURE__*/_jsx(Collapse, {
        isOpen: addressFieldsOpen,
        children: addressForm
      }), /*#__PURE__*/_jsxs("div", {
        className: "d-flex align-items-center",
        children: [!!errors.length && /*#__PURE__*/_jsxs("div", {
          className: "text-danger",
          children: [/*#__PURE__*/_jsx(FontAwesomeIcon, {
            icon: faExclamationTriangle
          }), " Invalid address!"]
        }), /*#__PURE__*/_jsxs("a", {
          className: "ml-auto btn btn-sm btn-link ".concat(!!errors.length && 'text-danger'),
          onClick: toggleAddressFieldsOpen,
          children: [/*#__PURE__*/_jsx(FontAwesomeIcon, {
            icon: addressFieldsOpen ? faTimes : faEdit
          }), " ", addressFieldsOpen ? 'Close' : 'Edit fields']
        })]
      })]
    }) : addressForm
  });
}
export default InputsAddress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,