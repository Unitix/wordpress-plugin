'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["ref"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { useController } from 'react-hook-form';
import { useMerchiCheckboutContext } from '../MerchiCheckoutProvider';
import InputError from './InputError';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function InputText(_ref) {
  var control = _ref.control,
    label = _ref.label,
    name = _ref.name,
    placeholder = _ref.placeholder,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'text' : _ref$type,
    _onChange = _ref.onChange,
    rules = _ref.rules;
  var _useMerchiCheckboutCo = useMerchiCheckboutContext(),
    classNameMerchiCheckoutFormGroup = _useMerchiCheckboutCo.classNameMerchiCheckoutFormGroup,
    classNameMerchiCheckoutFormInput = _useMerchiCheckboutCo.classNameMerchiCheckoutFormInput;
  var _useController = useController({
      name: name,
      control: control,
      rules: rules,
      defaultValue: ''
    }),
    _useController$field = _useController.field,
    ref = _useController$field.ref,
    inputProps = _objectWithoutProperties(_useController$field, _excluded),
    _useController$fieldS = _useController.fieldState,
    error = _useController$fieldS.error,
    invalid = _useController$fieldS.invalid;
  return /*#__PURE__*/_jsxs("div", {
    className: classNameMerchiCheckoutFormGroup,
    children: [label && /*#__PURE__*/_jsx("label", {
      children: label
    }), /*#__PURE__*/_jsx("input", _objectSpread(_objectSpread({
      className: "".concat(classNameMerchiCheckoutFormInput, " ").concat(invalid && ' is-invalid'),
      type: type,
      placeholder: placeholder
    }, inputProps), {}, {
      onChange: function onChange(e) {
        if (_onChange) _onChange(e); // Check if custom onChange was provided
        inputProps.onChange(e); // Default RHF onChange
      }
    })), /*#__PURE__*/_jsx(InputError, {
      error: error
    })]
  });
}
export default InputText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,