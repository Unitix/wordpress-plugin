'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useState } from 'react';
import TabPane from './TabPane';
import TitleStep from './TitleStep';
import FooterButtons from './FooterButtons';
import { tabIdDrafting } from '../tabs_utils';
import { useMerchiCheckboutContext } from './MerchiCheckoutProvider';
import MerchiImageEditor from './merchi_image_editor/MerchiImageEditor';
import InputFileUpload from './forms/InputFileUpload';
import { useForm } from 'react-hook-form';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function TabPaneDrafting() {
  var _useMerchiCheckboutCo = useMerchiCheckboutContext(),
    editDraftTemplate = _useMerchiCheckboutCo.editDraftTemplate,
    job = _useMerchiCheckboutCo.job,
    nextTab = _useMerchiCheckboutCo.nextTab,
    product = _useMerchiCheckboutCo.product,
    setJob = _useMerchiCheckboutCo.setJob,
    toggleMerchiCheckout = _useMerchiCheckboutCo.toggleMerchiCheckout;
  var allowClientDraftContribution = product.allowClientDraftContribution,
    _product$draftTemplat = product.draftTemplates,
    draftTemplates = _product$draftTemplat === void 0 ? [] : _product$draftTemplat;
  var clientFiles = job.clientFiles || [];
  var _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    activeTemplateIndex = _useState2[0],
    setActiveTemplateIndex = _useState2[1];
  var templates = draftTemplates.map(function (template, index) {
    var ownDraftImages = job.ownDrafts && job.ownDrafts[0] && job.ownDrafts[0].images || [];
    var newTemplate = _objectSpread({}, template);
    newTemplate.file = ownDraftImages && ownDraftImages[index] || template.file;
    return newTemplate;
  });
  var setClientFiles = function setClientFiles(clientFiles) {
    setJob(_objectSpread(_objectSpread({}, job), {}, {
      clientFiles: clientFiles
    }));
  };
  function onClickNext() {
    if (allowClientDraftContribution && draftTemplates.length) {
      if (activeTemplateIndex === draftTemplates.length - 1) {
        nextTab();
      } else {
        setActiveTemplateIndex(activeTemplateIndex + 1);
      }
    } else {
      nextTab();
    }
  }
  function onClickBack() {
    if (activeTemplateIndex) {
      setActiveTemplateIndex(activeTemplateIndex - 1);
    } else {
      toggleMerchiCheckout();
    }
  }
  var _useForm = useForm({
      defaultValues: {
        clientFiles: ''
      }
    }),
    control = _useForm.control;
  return /*#__PURE__*/_jsxs(TabPane, {
    tabId: tabIdDrafting,
    children: [allowClientDraftContribution && draftTemplates.length ? /*#__PURE__*/_jsxs(_Fragment, {
      children: [/*#__PURE__*/_jsx(TitleStep, {
        title: "Customise"
      }), /*#__PURE__*/_jsx(MerchiImageEditor, {
        activeTemplateIndex: activeTemplateIndex,
        clientFiles: job.clientFiles || [],
        draftTemplates: templates,
        editDraftTemplate: editDraftTemplate,
        setClientFiles: setClientFiles,
        setActiveTemplateIndex: setActiveTemplateIndex
      })]
    }) : /*#__PURE__*/_jsxs(_Fragment, {
      children: [/*#__PURE__*/_jsx(TitleStep, {
        title: "Customise - Upload Files"
      }), /*#__PURE__*/_jsx(InputFileUpload, {
        control: control,
        name: "clientFiles",
        onFileUploaded: function onFileUploaded(clientFile) {
          return setClientFiles([].concat(_toConsumableArray(clientFiles), [{
            file: clientFile,
            id: 'id'
          }]));
        }
      })]
    }), /*#__PURE__*/_jsx(FooterButtons, {
      forceDisabled: false,
      isActive: true,
      onClickBack: onClickBack,
      onClickNext: onClickNext
    })]
  });
}
export default TabPaneDrafting;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,