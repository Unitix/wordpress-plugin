'use client';

import { useMerchiCheckboutContext } from '../MerchiCheckoutProvider';
import { CgSpinner } from 'react-icons/cg';
import { FaArrowRight } from 'react-icons/fa';
import { jsx as _jsx } from "react/jsx-runtime";
function ButtonNext(_ref) {
  var formId = _ref.formId,
    forceDisabled = _ref.forceDisabled,
    loading = _ref.loading,
    onClick = _ref.onClick;
  var _useMerchiCheckboutCo = useMerchiCheckboutContext(),
    activeTabIndex = _useMerchiCheckboutCo.activeTabIndex,
    classNameMerchiCheckoutButtonPrimary = _useMerchiCheckboutCo.classNameMerchiCheckoutButtonPrimary,
    next = _useMerchiCheckboutCo.nextTab,
    tabs = _useMerchiCheckboutCo.tabs;
  var nextTab = tabs[(activeTabIndex || 0) + 1];
  var handleButtonClick = onClick ? onClick : next;
  var disabled = nextTab && nextTab.disabled;
  if (![null, undefined].includes(forceDisabled)) {
    disabled = forceDisabled;
  }
  return /*#__PURE__*/_jsx("button", {
    type: formId ? 'submit' : 'button' // Set type to "submit" if formId is provided
    ,
    form: formId // Associate this button with the form using formId
    ,
    className: classNameMerchiCheckoutButtonPrimary + ' btn-lg',
    disabled: disabled || loading,
    onClick: !formId ? handleButtonClick : undefined,
    children: loading ? /*#__PURE__*/_jsx(CgSpinner, {
      fontSize: "1.1rem",
      className: "animate_spin"
    }) : /*#__PURE__*/_jsx(FaArrowRight, {
      fontSize: "1.1rem"
    })
  });
}
export default ButtonNext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VNZXJjaGlDaGVja2JvdXRDb250ZXh0IiwiQ2dTcGlubmVyIiwiRmFBcnJvd1JpZ2h0IiwianN4IiwiX2pzeCIsIkJ1dHRvbk5leHQiLCJfcmVmIiwiZm9ybUlkIiwiZm9yY2VEaXNhYmxlZCIsImxvYWRpbmciLCJvbkNsaWNrIiwiX3VzZU1lcmNoaUNoZWNrYm91dENvIiwiYWN0aXZlVGFiSW5kZXgiLCJjbGFzc05hbWVNZXJjaGlDaGVja291dEJ1dHRvblByaW1hcnkiLCJuZXh0IiwibmV4dFRhYiIsInRhYnMiLCJoYW5kbGVCdXR0b25DbGljayIsImRpc2FibGVkIiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiLCJ0eXBlIiwiZm9ybSIsImNsYXNzTmFtZSIsImNoaWxkcmVuIiwiZm9udFNpemUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9idXR0b25zL0J1dHRvbk5leHQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCB7IHVzZU1lcmNoaUNoZWNrYm91dENvbnRleHQgfSBmcm9tICcuLi9NZXJjaGlDaGVja291dFByb3ZpZGVyJztcbmltcG9ydCB7IENnU3Bpbm5lciB9IGZyb20gJ3JlYWN0LWljb25zL2NnJztcbmltcG9ydCB7IEZhQXJyb3dSaWdodCB9IGZyb20gJ3JlYWN0LWljb25zL2ZhJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgZm9ybUlkPzogc3RyaW5nO1xuICBmb3JjZURpc2FibGVkPzogYm9vbGVhbjtcbiAgbG9hZGluZz86IGJvb2xlYW47XG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xufVxuXG5mdW5jdGlvbiBCdXR0b25OZXh0KHsgZm9ybUlkLCBmb3JjZURpc2FibGVkLCBsb2FkaW5nLCBvbkNsaWNrIH06IFByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVUYWJJbmRleCxcbiAgICBjbGFzc05hbWVNZXJjaGlDaGVja291dEJ1dHRvblByaW1hcnksXG4gICAgbmV4dFRhYjogbmV4dCxcbiAgICB0YWJzLFxuICB9ID0gdXNlTWVyY2hpQ2hlY2tib3V0Q29udGV4dCgpO1xuXG4gIGNvbnN0IG5leHRUYWIgPSB0YWJzWyhhY3RpdmVUYWJJbmRleCB8fCAwKSArIDFdO1xuXG4gIGNvbnN0IGhhbmRsZUJ1dHRvbkNsaWNrID0gb25DbGljayA/IG9uQ2xpY2sgOiBuZXh0O1xuICBsZXQgZGlzYWJsZWQgPSBuZXh0VGFiICYmIG5leHRUYWIuZGlzYWJsZWQ7XG4gIGlmICghW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXMoZm9yY2VEaXNhYmxlZCBhcyBhbnkpKSB7XG4gICAgZGlzYWJsZWQgPSBmb3JjZURpc2FibGVkIGFzIGJvb2xlYW47XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICB0eXBlPXtmb3JtSWQgPyAnc3VibWl0JyA6ICdidXR0b24nfSAvLyBTZXQgdHlwZSB0byBcInN1Ym1pdFwiIGlmIGZvcm1JZCBpcyBwcm92aWRlZFxuICAgICAgZm9ybT17Zm9ybUlkfSAvLyBBc3NvY2lhdGUgdGhpcyBidXR0b24gd2l0aCB0aGUgZm9ybSB1c2luZyBmb3JtSWRcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lTWVyY2hpQ2hlY2tvdXRCdXR0b25QcmltYXJ5ICsgJyBidG4tbGcnfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkIHx8IGxvYWRpbmd9XG4gICAgICBvbkNsaWNrPXshZm9ybUlkID8gaGFuZGxlQnV0dG9uQ2xpY2sgOiB1bmRlZmluZWR9XG4gICAgPlxuICAgICAge2xvYWRpbmcgPyAoXG4gICAgICAgIDxDZ1NwaW5uZXIgZm9udFNpemU9JzEuMXJlbScgY2xhc3NOYW1lPSdhbmltYXRlX3NwaW4nIC8+XG4gICAgICApIDogKFxuICAgICAgICA8RmFBcnJvd1JpZ2h0IGZvbnRTaXplPScxLjFyZW0nIC8+XG4gICAgICApfVxuICAgIDwvYnV0dG9uPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25OZXh0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLFNBQVNBLHlCQUF5QixRQUFRLDJCQUEyQjtBQUNyRSxTQUFTQyxTQUFTLFFBQVEsZ0JBQWdCO0FBQzFDLFNBQVNDLFlBQVksUUFBUSxnQkFBZ0I7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFTOUMsU0FBU0MsVUFBVUEsQ0FBQUMsSUFBQSxFQUFxRDtFQUFBLElBQWxEQyxNQUFNLEdBQUFELElBQUEsQ0FBTkMsTUFBTTtJQUFFQyxhQUFhLEdBQUFGLElBQUEsQ0FBYkUsYUFBYTtJQUFFQyxPQUFPLEdBQUFILElBQUEsQ0FBUEcsT0FBTztJQUFFQyxPQUFPLEdBQUFKLElBQUEsQ0FBUEksT0FBTztFQUMzRCxJQUFBQyxxQkFBQSxHQUtJWCx5QkFBeUIsQ0FBQyxDQUFDO0lBSjdCWSxjQUFjLEdBQUFELHFCQUFBLENBQWRDLGNBQWM7SUFDZEMsb0NBQW9DLEdBQUFGLHFCQUFBLENBQXBDRSxvQ0FBb0M7SUFDM0JDLElBQUksR0FBQUgscUJBQUEsQ0FBYkksT0FBTztJQUNQQyxJQUFJLEdBQUFMLHFCQUFBLENBQUpLLElBQUk7RUFHTixJQUFNRCxPQUFPLEdBQUdDLElBQUksQ0FBQyxDQUFDSixjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUUvQyxJQUFNSyxpQkFBaUIsR0FBR1AsT0FBTyxHQUFHQSxPQUFPLEdBQUdJLElBQUk7RUFDbEQsSUFBSUksUUFBUSxHQUFHSCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0csUUFBUTtFQUMxQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQyxDQUFDQyxRQUFRLENBQUNaLGFBQW9CLENBQUMsRUFBRTtJQUNyRFUsUUFBUSxHQUFHVixhQUF3QjtFQUNyQztFQUNBLG9CQUNFSixJQUFBO0lBQ0VpQixJQUFJLEVBQUVkLE1BQU0sR0FBRyxRQUFRLEdBQUcsUUFBUyxDQUFDO0lBQUE7SUFDcENlLElBQUksRUFBRWYsTUFBTyxDQUFDO0lBQUE7SUFDZGdCLFNBQVMsRUFBRVYsb0NBQW9DLEdBQUcsU0FBVTtJQUM1REssUUFBUSxFQUFFQSxRQUFRLElBQUlULE9BQVE7SUFDOUJDLE9BQU8sRUFBRSxDQUFDSCxNQUFNLEdBQUdVLGlCQUFpQixHQUFHRSxTQUFVO0lBQUFLLFFBQUEsRUFFaERmLE9BQU8sZ0JBQ05MLElBQUEsQ0FBQ0gsU0FBUztNQUFDd0IsUUFBUSxFQUFDLFFBQVE7TUFBQ0YsU0FBUyxFQUFDO0lBQWMsQ0FBRSxDQUFDLGdCQUV4RG5CLElBQUEsQ0FBQ0YsWUFBWTtNQUFDdUIsUUFBUSxFQUFDO0lBQVEsQ0FBRTtFQUNsQyxDQUNLLENBQUM7QUFFYjtBQUVBLGVBQWVwQixVQUFVIn0=