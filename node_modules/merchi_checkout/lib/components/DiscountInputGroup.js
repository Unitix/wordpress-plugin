function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import * as React from 'react';
import { useForm } from 'react-hook-form';
import { Merchi } from 'merchi_sdk_ts';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleNotch, faTimes } from '@fortawesome/free-solid-svg-icons';
import { useMerchiCheckboutContext } from './MerchiCheckoutProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default function DiscountInputGroup() {
  var _useMerchiCheckboutCo = useMerchiCheckboutContext(),
    _useMerchiCheckboutCo2 = _useMerchiCheckboutCo.discountButtonText,
    discountButtonText = _useMerchiCheckboutCo2 === void 0 ? 'Apply' : _useMerchiCheckboutCo2,
    discountCallbackError = _useMerchiCheckboutCo.discountCallbackError,
    discountCallbackSuccess = _useMerchiCheckboutCo.discountCallbackSuccess,
    _useMerchiCheckboutCo3 = _useMerchiCheckboutCo.discountClassName,
    discountClassName = _useMerchiCheckboutCo3 === void 0 ? 'merchi-checkout-discount-code-container' : _useMerchiCheckboutCo3,
    _useMerchiCheckboutCo4 = _useMerchiCheckboutCo.discountClassNameButton,
    discountClassNameButton = _useMerchiCheckboutCo4 === void 0 ? 'btn btn-primary' : _useMerchiCheckboutCo4,
    _useMerchiCheckboutCo5 = _useMerchiCheckboutCo.discountClassNameButtonContainer,
    discountClassNameButtonContainer = _useMerchiCheckboutCo5 === void 0 ? '' : _useMerchiCheckboutCo5,
    _useMerchiCheckboutCo6 = _useMerchiCheckboutCo.discountClassNameButtonItemRemove,
    discountClassNameButtonItemRemove = _useMerchiCheckboutCo6 === void 0 ? 'btn btn-sm btn-link' : _useMerchiCheckboutCo6,
    _useMerchiCheckboutCo7 = _useMerchiCheckboutCo.discountClassNameErrorMessage,
    discountClassNameErrorMessage = _useMerchiCheckboutCo7 === void 0 ? 'text-danger' : _useMerchiCheckboutCo7,
    _useMerchiCheckboutCo8 = _useMerchiCheckboutCo.discountClassNameInput,
    discountClassNameInput = _useMerchiCheckboutCo8 === void 0 ? 'form-control' : _useMerchiCheckboutCo8,
    _useMerchiCheckboutCo9 = _useMerchiCheckboutCo.discountClassNameInputContainer,
    discountClassNameInputContainer = _useMerchiCheckboutCo9 === void 0 ? 'merchi-checkout-discount-code-field-container' : _useMerchiCheckboutCo9,
    _useMerchiCheckboutCo10 = _useMerchiCheckboutCo.discountClassNameListItem,
    discountClassNameListItem = _useMerchiCheckboutCo10 === void 0 ? 'list-group-item d-flex align-items-center justify-content-between mt-2' : _useMerchiCheckboutCo10,
    _useMerchiCheckboutCo11 = _useMerchiCheckboutCo.discountClassNameListItems,
    discountClassNameListItems = _useMerchiCheckboutCo11 === void 0 ? 'list-group' : _useMerchiCheckboutCo11,
    discountClassNameMainContainer = _useMerchiCheckboutCo.discountClassNameMainContainer,
    discountShowAppliedItems = _useMerchiCheckboutCo.discountShowAppliedItems,
    invoice = _useMerchiCheckboutCo.invoice,
    job = _useMerchiCheckboutCo.job,
    product = _useMerchiCheckboutCo.product,
    setInvoice = _useMerchiCheckboutCo.setInvoice,
    setJob = _useMerchiCheckboutCo.setJob;
  var merchi = new Merchi();
  var hookForm = useForm({
    defaultValues: {
      codes: ''
    }
  });
  var getValues = hookForm.getValues,
    register = hookForm.register,
    setValue = hookForm.setValue,
    trigger = hookForm.trigger,
    errors = hookForm.formState.errors;
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    loading = _React$useState2[0],
    setLoading = _React$useState2[1];
  var _React$useState3 = React.useState({}),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    error = _React$useState4[0],
    setError = _React$useState4[1];
  var onSubmit = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var validate;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return trigger();
          case 2:
            validate = _context.sent;
            if (!validate) {
              _context.next = 6;
              break;
            }
            _context.next = 6;
            return validateCodes(data.codes);
          case 6:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function onSubmit(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  function validateCodes(_x2) {
    return _validateCodes.apply(this, arguments);
  }
  function _validateCodes() {
    _validateCodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(codes) {
      var query, url, r, _items;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            query = [['codes', codes]];
            setLoading(true);
            setError({});
            _context2.prev = 3;
            url = '';
            if (product) {
              url = "/products/".concat(product.id, "/check_discount_code/");
            }
            if (job !== null && job !== void 0 && job.totalCost) {
              query.push(['total_cost', job.totalCost]);
            }
            _context2.next = 9;
            return merchi.authenticatedFetch(url, {
              query: query
            });
          case 9:
            r = _context2.sent;
            _items = r.items || [];
            setItems(_items);
            setJob(_objectSpread(_objectSpread({}, job), {}, {
              items: _items
            }));
            if (invoice) {
              setInvoice(_objectSpread(_objectSpread({}, invoice), {}, {
                items: _items
              }));
            }
            discountCallbackSuccess(r);
            _context2.next = 21;
            break;
          case 17:
            _context2.prev = 17;
            _context2.t0 = _context2["catch"](3);
            setError({
              message: "Error: ".concat(_context2.t0.errorMessage || _context2.t0.message || 'Unexpected error.')
            });
            discountCallbackError();
          case 21:
            _context2.prev = 21;
            setLoading(false);
            return _context2.finish(21);
          case 24:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[3, 17, 21, 24]]);
    }));
    return _validateCodes.apply(this, arguments);
  }
  function handleClick() {
    return _handleClick.apply(this, arguments);
  }
  function _handleClick() {
    _handleClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var _getValues, codes;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _getValues = getValues(), codes = _getValues.codes;
            _context3.next = 3;
            return onSubmit({
              codes: codes
            });
          case 3:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return _handleClick.apply(this, arguments);
  }
  var _React$useState5 = React.useState([]),
    _React$useState6 = _slicedToArray(_React$useState5, 2),
    items = _React$useState6[0],
    setItems = _React$useState6[1];
  function removeItem(_x3) {
    return _removeItem.apply(this, arguments);
  }
  function _removeItem() {
    _removeItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(index) {
      var item, codes, newValues;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            item = _objectSpread({}, items[index]);
            codes = getValues('codes');
            newValues = codes.replace(item.code, "");
            setValue('codes', newValues);
            _context4.next = 6;
            return validateCodes(newValues);
          case 6:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return _removeItem.apply(this, arguments);
  }
  return /*#__PURE__*/_jsxs("div", {
    className: discountClassNameMainContainer,
    children: [/*#__PURE__*/_jsxs("div", {
      className: discountClassName,
      children: [/*#__PURE__*/_jsx("div", {
        className: discountClassNameInputContainer,
        children: /*#__PURE__*/_jsx("input", _objectSpread({
          type: "text",
          className: discountClassNameInput,
          placeholder: "discount20,discount10"
        }, register('codes', {
          required: 'Codes must be provided.'
        })))
      }), /*#__PURE__*/_jsx("div", {
        className: discountClassNameButtonContainer,
        children: /*#__PURE__*/_jsx("button", {
          className: discountClassNameButton,
          disabled: loading,
          onClick: handleClick,
          children: loading ? /*#__PURE__*/_jsx(FontAwesomeIcon, {
            icon: faCircleNotch
          }) : discountButtonText
        })
      })]
    }), error.message && /*#__PURE__*/_jsx("div", {
      className: discountClassNameErrorMessage,
      children: error.message
    }), errors.codes && /*#__PURE__*/_jsx("div", {
      className: discountClassNameErrorMessage,
      children: errors.codes.message
    }), discountShowAppliedItems && /*#__PURE__*/_jsx("div", {
      className: discountClassNameListItems,
      children: items.map(function (item, index) {
        return /*#__PURE__*/_jsxs("div", {
          className: discountClassNameListItem,
          children: [/*#__PURE__*/_jsxs("div", {
            children: [item.code, " ", item.description]
          }), /*#__PURE__*/_jsx("div", {
            children: /*#__PURE__*/_jsx("button", {
              className: discountClassNameButtonItemRemove,
              onClick: function onClick() {
                return removeItem(index);
              },
              children: /*#__PURE__*/_jsx(FontAwesomeIcon, {
                icon: faTimes
              })
            })
          })]
        }, index);
      })
    })]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,