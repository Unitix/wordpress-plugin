'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { useEffect } from 'react';
import { useMerchiCheckboutContext } from './MerchiCheckoutProvider';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle, faExclamationCircle, faExclamationTriangle, faInfoCircle, faTimes } from '@fortawesome/free-solid-svg-icons';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var iconsMap = {
  danger: faExclamationCircle,
  info: faInfoCircle,
  success: faCheckCircle,
  warning: faExclamationTriangle
};
function AlertSmall(_ref) {
  var _ref$alertType = _ref.alertType,
    alertType = _ref$alertType === void 0 ? 'error' : _ref$alertType,
    close = _ref.close,
    _ref$delay = _ref.delay,
    delay = _ref$delay === void 0 ? 5000 : _ref$delay,
    message = _ref.message,
    title = _ref.title;
  var _useMerchiCheckboutCo = useMerchiCheckboutContext(),
    classNameMerchiCheckoutAlert = _useMerchiCheckboutCo.classNameMerchiCheckoutAlert,
    classNameMerchiCheckoutAlertError = _useMerchiCheckboutCo.classNameMerchiCheckoutAlertError,
    classNameMerchiCheckoutAlertSuccess = _useMerchiCheckboutCo.classNameMerchiCheckoutAlertSuccess;
  function setTimer() {
    setTimeout(close, delay);
  }
  useEffect(function () {
    if (!['danger', 'error'].includes(alertType)) {
      setTimer();
    }
  }, [message]);
  var classNameAlertType = alertType === 'error' ? classNameMerchiCheckoutAlertError : classNameMerchiCheckoutAlertSuccess;
  return /*#__PURE__*/_jsx("div", {
    className: "".concat(classNameMerchiCheckoutAlert, " ").concat(classNameAlertType),
    children: /*#__PURE__*/_jsxs("div", {
      style: {
        display: 'flex',
        justifyContent: 'space-between'
      },
      children: [/*#__PURE__*/_jsx(FontAwesomeIcon, {
        className: "alert-icon",
        icon: iconsMap[alertType]
      }), /*#__PURE__*/_jsxs("div", {
        className: "alert-text",
        children: [/*#__PURE__*/_jsx("span", {
          className: "alert-title",
          "data-notify": "title",
          children: title
        }), ' ', /*#__PURE__*/_jsx("span", {
          "data-notify": "message",
          children: message
        })]
      }), /*#__PURE__*/_jsx("div", {
        onClick: close,
        children: /*#__PURE__*/_jsx(FontAwesomeIcon, {
          icon: faTimes
        })
      })]
    })
  });
}
function Alerts() {
  var _useMerchiCheckboutCo2 = useMerchiCheckboutContext(),
    alerts = _useMerchiCheckboutCo2.alerts,
    alertClose = _useMerchiCheckboutCo2.alertClose,
    classNameMerchiCheckoutAlertsContainer = _useMerchiCheckboutCo2.classNameMerchiCheckoutAlertsContainer;
  ;
  return /*#__PURE__*/_jsx("div", {
    className: classNameMerchiCheckoutAlertsContainer,
    children: alerts.map(function (alert, index) {
      return /*#__PURE__*/_jsx(AlertSmall, _objectSpread({
        close: function close() {
          return alertClose(index);
        }
      }, alert), "alert-index-key-".concat(index));
    })
  });
}
export default Alerts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwidXNlRWZmZWN0IiwidXNlTWVyY2hpQ2hlY2tib3V0Q29udGV4dCIsIkZvbnRBd2Vzb21lSWNvbiIsImZhQ2hlY2tDaXJjbGUiLCJmYUV4Y2xhbWF0aW9uQ2lyY2xlIiwiZmFFeGNsYW1hdGlvblRyaWFuZ2xlIiwiZmFJbmZvQ2lyY2xlIiwiZmFUaW1lcyIsImpzeCIsIl9qc3giLCJqc3hzIiwiX2pzeHMiLCJpY29uc01hcCIsImRhbmdlciIsImluZm8iLCJzdWNjZXNzIiwid2FybmluZyIsIkFsZXJ0U21hbGwiLCJfcmVmIiwiX3JlZiRhbGVydFR5cGUiLCJhbGVydFR5cGUiLCJjbG9zZSIsIl9yZWYkZGVsYXkiLCJkZWxheSIsIm1lc3NhZ2UiLCJ0aXRsZSIsIl91c2VNZXJjaGlDaGVja2JvdXRDbyIsImNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0QWxlcnQiLCJjbGFzc05hbWVNZXJjaGlDaGVja291dEFsZXJ0RXJyb3IiLCJjbGFzc05hbWVNZXJjaGlDaGVja291dEFsZXJ0U3VjY2VzcyIsInNldFRpbWVyIiwic2V0VGltZW91dCIsImluY2x1ZGVzIiwiY2xhc3NOYW1lQWxlcnRUeXBlIiwiY2xhc3NOYW1lIiwiY29uY2F0IiwiY2hpbGRyZW4iLCJzdHlsZSIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImljb24iLCJvbkNsaWNrIiwiQWxlcnRzIiwiX3VzZU1lcmNoaUNoZWNrYm91dENvMiIsImFsZXJ0cyIsImFsZXJ0Q2xvc2UiLCJjbGFzc05hbWVNZXJjaGlDaGVja291dEFsZXJ0c0NvbnRhaW5lciIsIm1hcCIsImFsZXJ0IiwiaW5kZXgiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy9BbGVydHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZU1lcmNoaUNoZWNrYm91dENvbnRleHQgfSBmcm9tICcuL01lcmNoaUNoZWNrb3V0UHJvdmlkZXInOyBcbmltcG9ydCB7IEZvbnRBd2Vzb21lSWNvbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZSc7XG5pbXBvcnQge1xuICBmYUNoZWNrQ2lyY2xlLFxuICBmYUV4Y2xhbWF0aW9uQ2lyY2xlLFxuICBmYUV4Y2xhbWF0aW9uVHJpYW5nbGUsXG4gIGZhSW5mb0NpcmNsZSxcbiAgZmFUaW1lcyxcbn0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zJztcblxuaW50ZXJmYWNlIFByb3BzQWxlcnRTbWFsbCB7XG4gIGFsZXJ0VHlwZT86IHN0cmluZztcbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG4gIGRlbGF5PzogbnVtYmVyO1xuICB0aXRsZTogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJY29uc01hcFR5cGUge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmNvbnN0IGljb25zTWFwOiBJY29uc01hcFR5cGUgPSB7XG4gIGRhbmdlcjogZmFFeGNsYW1hdGlvbkNpcmNsZSxcbiAgaW5mbzogZmFJbmZvQ2lyY2xlLFxuICBzdWNjZXNzOiBmYUNoZWNrQ2lyY2xlLFxuICB3YXJuaW5nOiBmYUV4Y2xhbWF0aW9uVHJpYW5nbGUsXG59O1xuXG5mdW5jdGlvbiBBbGVydFNtYWxsKHtcbiAgYWxlcnRUeXBlID0gJ2Vycm9yJyxcbiAgY2xvc2UsXG4gIGRlbGF5ID0gNTAwMCxcbiAgbWVzc2FnZSxcbiAgdGl0bGUsXG59OiBQcm9wc0FsZXJ0U21hbGwpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0QWxlcnQsXG4gICAgY2xhc3NOYW1lTWVyY2hpQ2hlY2tvdXRBbGVydEVycm9yLFxuICAgIGNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0QWxlcnRTdWNjZXNzLFxuICB9ID0gdXNlTWVyY2hpQ2hlY2tib3V0Q29udGV4dCgpO1xuICBmdW5jdGlvbiBzZXRUaW1lcigpIHtcbiAgICBzZXRUaW1lb3V0KGNsb3NlLCBkZWxheSk7XG4gIH1cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIVsnZGFuZ2VyJywgJ2Vycm9yJ10uaW5jbHVkZXMoYWxlcnRUeXBlKSkgeyBcbiAgICAgIHNldFRpbWVyKCk7XG4gICAgfVxuICB9LCBbbWVzc2FnZV0pO1xuICBjb25zdCBjbGFzc05hbWVBbGVydFR5cGUgPSBhbGVydFR5cGUgPT09ICdlcnJvcidcbiAgICA/IGNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0QWxlcnRFcnJvclxuICAgIDogY2xhc3NOYW1lTWVyY2hpQ2hlY2tvdXRBbGVydFN1Y2Nlc3M7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWVNZXJjaGlDaGVja291dEFsZXJ0fSAke2NsYXNzTmFtZUFsZXJ0VHlwZX1gfVxuICAgID5cbiAgICAgIDxkaXYgc3R5bGU9e3tkaXNwbGF5OiAnZmxleCcsIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2Vlbid9fT5cbiAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxuICAgICAgICAgIGNsYXNzTmFtZT0nYWxlcnQtaWNvbidcbiAgICAgICAgICBpY29uPXtpY29uc01hcFthbGVydFR5cGVdfVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYWxlcnQtdGV4dCc+XG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzTmFtZT0nYWxlcnQtdGl0bGUnXG4gICAgICAgICAgICBkYXRhLW5vdGlmeT0ndGl0bGUnXG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICB7JyAnfVxuICAgICAgICAgIDxzcGFuIGRhdGEtbm90aWZ5PSdtZXNzYWdlJz5cbiAgICAgICAgICAgIHttZXNzYWdlfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgb25DbGljaz17Y2xvc2V9PlxuICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUaW1lc30gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gQWxlcnRzKCkge1xuICBjb25zdCB7XG4gICAgYWxlcnRzLFxuICAgIGFsZXJ0Q2xvc2UsXG4gICAgY2xhc3NOYW1lTWVyY2hpQ2hlY2tvdXRBbGVydHNDb250YWluZXIsXG4gIH0gPSB1c2VNZXJjaGlDaGVja2JvdXRDb250ZXh0KCk7O1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVNZXJjaGlDaGVja291dEFsZXJ0c0NvbnRhaW5lcn0+XG4gICAgICB7XG4gICAgICAgIGFsZXJ0cy5tYXAoKGFsZXJ0OiBhbnksIGluZGV4OiBudW1iZXIpID0+XG4gICAgICAgICAgPEFsZXJ0U21hbGxcbiAgICAgICAgICAgIGtleT17YGFsZXJ0LWluZGV4LWtleS0ke2luZGV4fWB9XG4gICAgICAgICAgICBjbG9zZT17KCkgPT4gYWxlcnRDbG9zZShpbmRleCl9XG4gICAgICAgICAgICB7Li4uYWxlcnR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKVxuICAgICAgfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBbGVydHM7XG4gICAgIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDLFNBQUFBLFFBQUFDLENBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGtCQUFBQSxDQUFBLGdCQUFBQSxDQUFBLFdBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsS0FBQUQsT0FBQSxDQUFBQyxDQUFBO0FBQUEsU0FBQUssUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBWCxDQUFBLEdBQUFTLE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFQLENBQUEsR0FBQUEsQ0FBQSxDQUFBWSxNQUFBLFdBQUFMLENBQUEsV0FBQUUsTUFBQSxDQUFBSSx3QkFBQSxDQUFBUCxDQUFBLEVBQUFDLENBQUEsRUFBQU8sVUFBQSxPQUFBTixDQUFBLENBQUFPLElBQUEsQ0FBQUMsS0FBQSxDQUFBUixDQUFBLEVBQUFSLENBQUEsWUFBQVEsQ0FBQTtBQUFBLFNBQUFTLGNBQUFYLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFXLFNBQUEsQ0FBQUMsTUFBQSxFQUFBWixDQUFBLFVBQUFDLENBQUEsV0FBQVUsU0FBQSxDQUFBWCxDQUFBLElBQUFXLFNBQUEsQ0FBQVgsQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFZLE9B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