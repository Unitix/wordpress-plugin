'use client';

import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { useMerchiCheckboutContext } from './MerchiCheckoutProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function isPdf(file) {
  return ['application/pdf', 'application/x-pdf'].includes(file.mimetype);
}
function DraftImageUploaded(_ref) {
  var doDelete = _ref.doDelete,
    image = _ref.image;
  var _useMerchiCheckboutCo = useMerchiCheckboutContext(),
    classNameMerchiCheckoutButtonPrimary = _useMerchiCheckboutCo.classNameMerchiCheckoutButtonPrimary;
  return /*#__PURE__*/_jsxs("div", {
    className: "upload-draft-image-container",
    children: [/*#__PURE__*/_jsx("div", {
      className: "text-center",
      children: isPdf(image) ? /*#__PURE__*/_jsx("i", {
        className: "far fa-file-pdf"
      }) : /*#__PURE__*/_jsx("div", {
        className: "image-preview-div",
        style: {
          backgroundImage: "url(".concat(image.viewUrl, ")")
        }
      })
    }), doDelete && /*#__PURE__*/_jsx("button", {
      className: classNameMerchiCheckoutButtonPrimary,
      onClick: doDelete,
      children: /*#__PURE__*/_jsx(FontAwesomeIcon, {
        icon: faTrashAlt
      })
    })]
  });
}
export default DraftImageUploaded;
export function DraftImagesStatic(_ref2) {
  var items = _ref2.items,
    _ref2$className = _ref2.className,
    className = _ref2$className === void 0 ? 'width-150 z-index-10000' : _ref2$className;
  return /*#__PURE__*/_jsx("div", {
    className: "d-flex justify-content-center flex-wrap z-index-10000",
    children: items.map(function (image, i) {
      return /*#__PURE__*/_jsx("div", {
        className: className,
        children: /*#__PURE__*/_jsx(DraftImageUploaded, {
          image: image
        })
      }, "".concat(i, "-draft-image"));
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmYVRyYXNoQWx0IiwiRm9udEF3ZXNvbWVJY29uIiwidXNlTWVyY2hpQ2hlY2tib3V0Q29udGV4dCIsImpzeCIsIl9qc3giLCJqc3hzIiwiX2pzeHMiLCJpc1BkZiIsImZpbGUiLCJpbmNsdWRlcyIsIm1pbWV0eXBlIiwiRHJhZnRJbWFnZVVwbG9hZGVkIiwiX3JlZiIsImRvRGVsZXRlIiwiaW1hZ2UiLCJfdXNlTWVyY2hpQ2hlY2tib3V0Q28iLCJjbGFzc05hbWVNZXJjaGlDaGVja291dEJ1dHRvblByaW1hcnkiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsInN0eWxlIiwiYmFja2dyb3VuZEltYWdlIiwiY29uY2F0Iiwidmlld1VybCIsIm9uQ2xpY2siLCJpY29uIiwiRHJhZnRJbWFnZXNTdGF0aWMiLCJfcmVmMiIsIml0ZW1zIiwiX3JlZjIkY2xhc3NOYW1lIiwibWFwIiwiaSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL0RyYWZ0SW1hZ2VVcGxvYWRlZC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIGNsaWVudCc7XG5pbXBvcnQgeyBmYVRyYXNoQWx0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zJztcbmltcG9ydCB7IEZvbnRBd2Vzb21lSWNvbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZSc7XG5pbXBvcnQgeyB1c2VNZXJjaGlDaGVja2JvdXRDb250ZXh0IH0gZnJvbSAnLi9NZXJjaGlDaGVja291dFByb3ZpZGVyJztcblxuZnVuY3Rpb24gaXNQZGYoZmlsZTogYW55KSB7XG4gIHJldHVybiBbJ2FwcGxpY2F0aW9uL3BkZicsICdhcHBsaWNhdGlvbi94LXBkZiddLmluY2x1ZGVzKGZpbGUubWltZXR5cGUpO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBkb0RlbGV0ZT86ICgpID0+IHZvaWQ7XG4gIGltYWdlOiBhbnk7XG59XG5cbmZ1bmN0aW9uIERyYWZ0SW1hZ2VVcGxvYWRlZCh7IGRvRGVsZXRlLCBpbWFnZSB9OiBQcm9wcykge1xuICBjb25zdCB7IGNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0QnV0dG9uUHJpbWFyeSB9ID0gdXNlTWVyY2hpQ2hlY2tib3V0Q29udGV4dCgpO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPSd1cGxvYWQtZHJhZnQtaW1hZ2UtY29udGFpbmVyJz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSd0ZXh0LWNlbnRlcic+XG4gICAgICAgIHtpc1BkZihpbWFnZSkgP1xuICAgICAgICAgIDxpIGNsYXNzTmFtZT0nZmFyIGZhLWZpbGUtcGRmJyAvPlxuICAgICAgICA6XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPSdpbWFnZS1wcmV2aWV3LWRpdidcbiAgICAgICAgICAgIHN0eWxlPXt7YmFja2dyb3VuZEltYWdlOiBgdXJsKCR7aW1hZ2Uudmlld1VybH0pYH19XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgICB7ZG9EZWxldGUgJiZcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e2NsYXNzTmFtZU1lcmNoaUNoZWNrb3V0QnV0dG9uUHJpbWFyeX0gb25DbGljaz17ZG9EZWxldGV9PlxuICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFUcmFzaEFsdH0gLz5cbiAgICAgICAgPC9idXR0b24+XG4gICAgfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBEcmFmdEltYWdlVXBsb2FkZWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBEcmFmdEltYWdlc1N0YXRpYyh7XG4gIGl0ZW1zLFxuICBjbGFzc05hbWUgPSAnd2lkdGgtMTUwIHotaW5kZXgtMTAwMDAnIH06IGFueSkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPSdkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBmbGV4LXdyYXAgei1pbmRleC0xMDAwMCc+XG4gICAgICB7aXRlbXMubWFwKChpbWFnZTogYW55LCBpOiBudW1iZXIpID0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IGtleT17YCR7aX0tZHJhZnQtaW1hZ2VgfT5cbiAgICAgICAgICA8RHJhZnRJbWFnZVVwbG9hZGVkIGltYWdlPXtpbWFnZX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxZQUFZOztBQUNaLFNBQVNBLFVBQVUsUUFBUSxtQ0FBbUM7QUFDOUQsU0FBU0MsZUFBZSxRQUFRLGdDQUFnQztBQUNoRSxTQUFTQyx5QkFBeUIsUUFBUSwwQkFBMEI7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFBQSxTQUFBQyxJQUFBLElBQUFDLEtBQUE7QUFFckUsU0FBU0MsS0FBS0EsQ0FBQ0MsSUFBUyxFQUFFO0VBQ3hCLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDQyxRQUFRLENBQUNELElBQUksQ0FBQ0UsUUFBUSxDQUFDO0FBQ3pFO0FBT0EsU0FBU0Msa0JBQWtCQSxDQUFBQyxJQUFBLEVBQTZCO0VBQUEsSUFBMUJDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQUVDLEtBQUssR0FBQUYsSUFBQSxDQUFMRSxLQUFLO0VBQzNDLElBQUFDLHFCQUFBLEdBQWlEYix5QkFBeUIsQ0FBQyxDQUFDO0lBQXBFYyxvQ0FBb0MsR0FBQUQscUJBQUEsQ0FBcENDLG9DQUFvQztFQUM1QyxvQkFDRVYsS0FBQTtJQUFLVyxTQUFTLEVBQUMsOEJBQThCO0lBQUFDLFFBQUEsZ0JBQzNDZCxJQUFBO01BQUthLFNBQVMsRUFBQyxhQUFhO01BQUFDLFFBQUEsRUFDekJYLEtBQUssQ0FBQ08sS0FBSyxDQUFDLGdCQUNYVixJQUFBO1FBQUdhLFNBQVMsRUFBQztNQUFpQixDQUFFLENBQUMsZ0JBRWpDYixJQUFBO1FBQ0VhLFNBQVMsRUFBQyxtQkFBbUI7UUFDN0JFLEtBQUssRUFBRTtVQUFDQyxlQUFlLFNBQUFDLE1BQUEsQ0FBU1AsS0FBSyxDQUFDUSxPQUFPO1FBQUc7TUFBRSxDQUNuRDtJQUFDLENBRUQsQ0FBQyxFQUNMVCxRQUFRLGlCQUNQVCxJQUFBO01BQVFhLFNBQVMsRUFBRUQsb0NBQXFDO01BQUNPLE9BQU8sRUFBRVYsUUFBUztNQUFBSyxRQUFBLGVBQ3pFZCxJQUFBLENBQUNILGVBQWU7UUFBQ3VCLElBQUksRUFBRXhCO01BQVcsQ0FBRTtJQUFDLENBQy9CLENBQUM7RUFBQSxDQUVSLENBQUM7QUFFVjtBQUVBLGVBQWVXLGtCQUFrQjtBQUVqQyxPQUFPLFNBQVNjLGlCQUFpQkEsQ0FBQUMsS0FBQSxFQUVlO0VBQUEsSUFEOUNDLEtBQUssR0FBQUQsS0FBQSxDQUFMQyxLQUFLO0lBQUFDLGVBQUEsR0FBQUYsS0FBQSxDQUNMVCxTQUFTO0lBQVRBLFNBQVMsR0FBQVcsZUFBQSxjQUFHLHlCQUF5QixHQUFBQSxlQUFBO0VBQ3JDLG9CQUNFeEIsSUFBQTtJQUFLYSxTQUFTLEVBQUMsdURBQXVEO0lBQUFDLFFBQUEsRUFDbkVTLEtBQUssQ0FBQ0UsR0FBRyxDQUFDLFVBQUNmLEtBQVUsRUFBRWdCLENBQVM7TUFBQSxvQkFDL0IxQixJQUFBO1FBQUthLFNBQVMsRUFBRUEsU0FBVTtRQUFBQyxRQUFBLGVBQ3hCZCxJQUFBLENBQUNPLGtCQUFrQjtVQUFDRyxLQUFLLEVBQUVBO1FBQU0sQ0FBRTtNQUFDLE1BQUFPLE1BQUEsQ0FESFMsQ0FBQyxpQkFFL0IsQ0FBQztJQUFBLENBQ1I7RUFBQyxDQUNFLENBQUM7QUFFViJ9