import * as React from 'react';
import { useMerchiCheckboutContext } from './MerchiCheckoutProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function Tab(_ref) {
  var index = _ref.index,
    tab = _ref.tab;
  var _useMerchiCheckboutCo = useMerchiCheckboutContext(),
    activeTabIndex = _useMerchiCheckboutCo.activeTabIndex,
    classNameMerchiCheckoutTab = _useMerchiCheckboutCo.classNameMerchiCheckoutTab,
    classNameMerchiCheckoutTabButton = _useMerchiCheckboutCo.classNameMerchiCheckoutTabButton,
    setActiveTabIndex = _useMerchiCheckboutCo.setActiveTabIndex;
  var disabled = tab.disabled,
    title = tab.title;
  var classActive = activeTabIndex === index ? 'active' : '';
  return /*#__PURE__*/_jsxs("div", {
    className: classNameMerchiCheckoutTab,
    children: [/*#__PURE__*/_jsx("button", {
      disabled: disabled,
      className: "".concat(classNameMerchiCheckoutTabButton, " ").concat(classActive),
      style: {
        cursor: disabled ? 'not-allowed' : 'pointer'
      },
      onClick: function onClick() {
        if (!disabled) {
          setActiveTabIndex(index);
        }
      },
      children: index + 1
    }), /*#__PURE__*/_jsx("small", {
      className: "text-muted",
      children: title
    })]
  });
}
export default function MerchiCheckoutTabs() {
  var _useMerchiCheckboutCo2 = useMerchiCheckboutContext(),
    classNameMerchiCheckoutTabsContainer = _useMerchiCheckboutCo2.classNameMerchiCheckoutTabsContainer,
    tabs = _useMerchiCheckboutCo2.tabs;
  return /*#__PURE__*/_jsx("div", {
    className: classNameMerchiCheckoutTabsContainer,
    children: tabs.map(function (t, i) {
      return /*#__PURE__*/_jsx(Tab, {
        index: i,
        tab: t
      }, "".concat(i, "-tab-id"));
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZU1lcmNoaUNoZWNrYm91dENvbnRleHQiLCJqc3giLCJfanN4IiwianN4cyIsIl9qc3hzIiwiVGFiIiwiX3JlZiIsImluZGV4IiwidGFiIiwiX3VzZU1lcmNoaUNoZWNrYm91dENvIiwiYWN0aXZlVGFiSW5kZXgiLCJjbGFzc05hbWVNZXJjaGlDaGVja291dFRhYiIsImNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0VGFiQnV0dG9uIiwic2V0QWN0aXZlVGFiSW5kZXgiLCJkaXNhYmxlZCIsInRpdGxlIiwiY2xhc3NBY3RpdmUiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsImNvbmNhdCIsInN0eWxlIiwiY3Vyc29yIiwib25DbGljayIsIk1lcmNoaUNoZWNrb3V0VGFicyIsIl91c2VNZXJjaGlDaGVja2JvdXRDbzIiLCJjbGFzc05hbWVNZXJjaGlDaGVja291dFRhYnNDb250YWluZXIiLCJ0YWJzIiwibWFwIiwidCIsImkiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy9NZXJjaGlDaGVja291dFRhYnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1lcmNoaUNoZWNrb3V0VGFiIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgdXNlTWVyY2hpQ2hlY2tib3V0Q29udGV4dCB9IGZyb20gJy4vTWVyY2hpQ2hlY2tvdXRQcm92aWRlcic7XG5cbmludGVyZmFjZSBQcm9wc1RhYiB7XG4gIGluZGV4OiBudW1iZXI7XG4gIHRhYjogTWVyY2hpQ2hlY2tvdXRUYWI7XG59XG5cbmZ1bmN0aW9uIFRhYih7IGluZGV4LCB0YWIgfTogUHJvcHNUYWIpIHtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZVRhYkluZGV4LFxuICAgIGNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0VGFiLFxuICAgIGNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0VGFiQnV0dG9uLFxuICAgIHNldEFjdGl2ZVRhYkluZGV4LFxuICB9ID0gdXNlTWVyY2hpQ2hlY2tib3V0Q29udGV4dCgpO1xuICBjb25zdCB7IGRpc2FibGVkLCB0aXRsZSB9ID0gdGFiO1xuICBjb25zdCBjbGFzc0FjdGl2ZSA9IGFjdGl2ZVRhYkluZGV4ID09PSBpbmRleCA/ICdhY3RpdmUnIDogJyc7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZU1lcmNoaUNoZWNrb3V0VGFifT5cbiAgICAgIDxidXR0b25cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICBjbGFzc05hbWU9e2Ake2NsYXNzTmFtZU1lcmNoaUNoZWNrb3V0VGFiQnV0dG9ufSAke2NsYXNzQWN0aXZlfWB9XG4gICAgICAgIHN0eWxlPXt7IGN1cnNvcjogZGlzYWJsZWQgPyAnbm90LWFsbG93ZWQnIDogJ3BvaW50ZXInIH19XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYWJJbmRleChpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7aW5kZXggKyAxfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8c21hbGwgY2xhc3NOYW1lPSd0ZXh0LW11dGVkJz57dGl0bGV9PC9zbWFsbD5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWVyY2hpQ2hlY2tvdXRUYWJzKCkge1xuICBjb25zdCB7IGNsYXNzTmFtZU1lcmNoaUNoZWNrb3V0VGFic0NvbnRhaW5lciwgdGFicyB9ID1cbiAgICB1c2VNZXJjaGlDaGVja2JvdXRDb250ZXh0KCk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZU1lcmNoaUNoZWNrb3V0VGFic0NvbnRhaW5lcn0+XG4gICAgICB7dGFicy5tYXAoKHQ6IE1lcmNoaUNoZWNrb3V0VGFiLCBpOiBudW1iZXIpID0+IChcbiAgICAgICAgPFRhYiBrZXk9e2Ake2l9LXRhYi1pZGB9IGluZGV4PXtpfSB0YWI9e3R9IC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLQSxLQUFLLE1BQU0sT0FBTztBQUU5QixTQUFTQyx5QkFBeUIsUUFBUSwwQkFBMEI7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFBQSxTQUFBQyxJQUFBLElBQUFDLEtBQUE7QUFPckUsU0FBU0MsR0FBR0EsQ0FBQUMsSUFBQSxFQUEyQjtFQUFBLElBQXhCQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztJQUFFQyxHQUFHLEdBQUFGLElBQUEsQ0FBSEUsR0FBRztFQUN2QixJQUFBQyxxQkFBQSxHQUtJVCx5QkFBeUIsQ0FBQyxDQUFDO0lBSjdCVSxjQUFjLEdBQUFELHFCQUFBLENBQWRDLGNBQWM7SUFDZEMsMEJBQTBCLEdBQUFGLHFCQUFBLENBQTFCRSwwQkFBMEI7SUFDMUJDLGdDQUFnQyxHQUFBSCxxQkFBQSxDQUFoQ0csZ0NBQWdDO0lBQ2hDQyxpQkFBaUIsR0FBQUoscUJBQUEsQ0FBakJJLGlCQUFpQjtFQUVuQixJQUFRQyxRQUFRLEdBQVlOLEdBQUcsQ0FBdkJNLFFBQVE7SUFBRUMsS0FBSyxHQUFLUCxHQUFHLENBQWJPLEtBQUs7RUFDdkIsSUFBTUMsV0FBVyxHQUFHTixjQUFjLEtBQUtILEtBQUssR0FBRyxRQUFRLEdBQUcsRUFBRTtFQUM1RCxvQkFDRUgsS0FBQTtJQUFLYSxTQUFTLEVBQUVOLDBCQUEyQjtJQUFBTyxRQUFBLGdCQUN6Q2hCLElBQUE7TUFDRVksUUFBUSxFQUFFQSxRQUFTO01BQ25CRyxTQUFTLEtBQUFFLE1BQUEsQ0FBS1AsZ0NBQWdDLE9BQUFPLE1BQUEsQ0FBSUgsV0FBVyxDQUFHO01BQ2hFSSxLQUFLLEVBQUU7UUFBRUMsTUFBTSxFQUFFUCxRQUFRLEdBQUcsYUFBYSxHQUFHO01BQVUsQ0FBRTtNQUN4RFEsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBTTtRQUNiLElBQUksQ0FBQ1IsUUFBUSxFQUFFO1VBQ2JELGlCQUFpQixDQUFDTixLQUFLLENBQUM7UUFDMUI7TUFDRixDQUFFO01BQUFXLFFBQUEsRUFFRFgsS0FBSyxHQUFHO0lBQUMsQ0FDSixDQUFDLGVBQ1RMLElBQUE7TUFBT2UsU0FBUyxFQUFDLFlBQVk7TUFBQUMsUUFBQSxFQUFFSDtJQUFLLENBQVEsQ0FBQztFQUFBLENBQzFDLENBQUM7QUFFVjtBQUVBLGVBQWUsU0FBU1Esa0JBQWtCQSxDQUFBLEVBQUc7RUFDM0MsSUFBQUMsc0JBQUEsR0FDRXhCLHlCQUF5QixDQUFDLENBQUM7SUFEckJ5QixvQ0FBb0MsR0FBQUQsc0JBQUEsQ0FBcENDLG9DQUFvQztJQUFFQyxJQUFJLEdBQUFGLHNCQUFBLENBQUpFLElBQUk7RUFFbEQsb0JBQ0V4QixJQUFBO0lBQUtlLFNBQVMsRUFBRVEsb0NBQXFDO0lBQUFQLFFBQUEsRUFDbERRLElBQUksQ0FBQ0MsR0FBRyxDQUFDLFVBQUNDLENBQW9CLEVBQUVDLENBQVM7TUFBQSxvQkFDeEMzQixJQUFBLENBQUNHLEdBQUc7UUFBcUJFLEtBQUssRUFBRXNCLENBQUU7UUFBQ3JCLEdBQUcsRUFBRW9CO01BQUUsTUFBQVQsTUFBQSxDQUE3QlUsQ0FBQyxZQUE4QixDQUFDO0lBQUEsQ0FDOUM7RUFBQyxDQUNDLENBQUM7QUFFViJ9