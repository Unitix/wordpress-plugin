function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import camelCase from 'lodash/camelCase';
import snakeCase from 'lodash/snakeCase';
var TransformationType = /*#__PURE__*/function (TransformationType) {
  TransformationType["CAMEL"] = "camel";
  TransformationType["UNDERSCORE"] = "underscore";
  return TransformationType;
}(TransformationType || {});
var functionDict = _defineProperty(_defineProperty({}, TransformationType.CAMEL, camelCase), TransformationType.UNDERSCORE, snakeCase);
function parseJsonKeyNames(jsonObject, standard) {
  if (_typeof(jsonObject) === 'object' && jsonObject !== null) {
    if (Array.isArray(jsonObject)) {
      var _iterator = _createForOfIteratorHelper(jsonObject),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          parseJsonKeyNames(item, standard);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var oldKeys = Object.keys(jsonObject);
      for (var _i = 0, _oldKeys = oldKeys; _i < _oldKeys.length; _i++) {
        var old = _oldKeys[_i];
        var newKey = functionDict[standard](old);
        if (newKey !== old) {
          jsonObject[newKey] = jsonObject[old];
          delete jsonObject[old];
          parseJsonKeyNames(jsonObject[newKey], standard);
        } else {
          parseJsonKeyNames(jsonObject[old], standard);
        }
      }
    }
  }
  return jsonObject;
}
function parseJsonKeyCamel(jsonObject) {
  return parseJsonKeyNames(jsonObject, TransformationType.CAMEL);
}
export function unpackRecursiveJsonIter(jsonObject, options, fileIndex) {
  if (!options) options = {};
  var result = options.existing || new FormData();
  var prefix = options._prefix || '';
  if (!fileIndex) fileIndex = {
    value: 0
  };
  var appendData = function appendData(name, value) {
    if (prefix) {
      name = prefix + '-' + name;
    }
    if (value !== undefined && value !== null) {
      result.set(name, value.toString()); // Convert to string since FormData accepts only strings or Blobs.
    }
  };
  var processSingleEntityProperty = function processSingleEntityProperty(key, value) {
    var innerPrefix = key + '-0';
    if (prefix) {
      innerPrefix = prefix + '-' + innerPrefix;
    }
    unpackRecursiveJsonIter(value, {
      existing: result,
      _prefix: innerPrefix
    }, fileIndex);
    appendData(key + '-count', '1');
  };
  var _loop = function _loop(_key) {
    if ([undefined, '', null].includes(jsonObject[_key]) || _key === 'rights') {
      return 1; // continue
    }
    if (Array.isArray(jsonObject[_key])) {
      jsonObject[_key].forEach(function (item, index) {
        if ((_typeof(item) === "object" || Array.isArray(item)) && item !== null) {
          var arrayPrefix = prefix ? "".concat(prefix, "-").concat(_key, "-").concat(index) : "".concat(_key, "-").concat(index);
          unpackRecursiveJsonIter(item, {
            existing: result,
            _prefix: arrayPrefix
          }, fileIndex);
        } else {
          appendData("".concat(_key, "-").concat(index), item);
        }
      });
      appendData(_key + '-count', jsonObject[_key].length.toString());
    } else if (_typeof(jsonObject[_key]) === "object" && jsonObject[_key] !== null) {
      processSingleEntityProperty(_key, jsonObject[_key]);
    } else {
      appendData(_key, jsonObject[_key]);
    }
  };
  for (var _key in jsonObject) {
    if (_loop(_key)) continue;
  }
  return result;
}
export function encodeMerchiApiData(dataDict) {
  var dataJson = parseJsonKeyCamel(dataDict);
  return unpackRecursiveJsonIter(dataJson);
}
export function urlSearchParams(inputParams) {
  var params = _objectSpread({}, inputParams); // Create a shallow copy to prevent mutation

  Object.keys(params).forEach(function (key) {
    if (params[key] === undefined || params[key] === null || params[key] === "") {
      delete params[key];
    } else if (Array.isArray(params[key])) {
      params[key] = params[key].join(',');
    } else if (_typeof(params[key]) === 'object') {
      params[key] = JSON.stringify(params[key]);
    }
  });
  return new URLSearchParams(params).toString();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,