function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
export function stripeInitPromise(_x) {
  return _stripeInitPromise.apply(this, arguments);
}
function _stripeInitPromise() {
  _stripeInitPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(urlApi) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return fetch("".concat(urlApi, "stripe/master_publishable_key/"), {
            method: 'GET',
            mode: 'cors'
          }).then(function (response) {
            return response.key;
          });
        case 2:
          return _context.abrupt("return", _context.sent);
        case 3:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _stripeInitPromise.apply(this, arguments);
}
function createPaymentIntent(_x2, _x3, _x4) {
  return _createPaymentIntent.apply(this, arguments);
}
function _createPaymentIntent() {
  _createPaymentIntent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(urlApi, invoice, paymentMethodType) {
    var id, invoiceToken, fetchOptions, queryParams, queryString, uri, url, response;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          id = invoice.id, invoiceToken = invoice.invoiceToken;
          fetchOptions = {
            method: 'GET',
            mode: 'cors'
          };
          queryParams = [['invoice_token', invoiceToken]];
          if (paymentMethodType) {
            queryParams.push(['payment_method_types', paymentMethodType]);
          }
          queryString = new URLSearchParams(queryParams).toString();
          uri = "stripe/payment_intent/invoice/".concat(id, "/");
          url = "".concat(urlApi).concat(uri, "?").concat(queryString);
          _context2.next = 9;
          return fetch(url, fetchOptions);
        case 9:
          response = _context2.sent;
          if (response.ok) {
            _context2.next = 12;
            break;
          }
          throw new Error("Failed to create payment intent.");
        case 12:
          _context2.next = 14;
          return response.json();
        case 14:
          return _context2.abrupt("return", _context2.sent);
        case 15:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _createPaymentIntent.apply(this, arguments);
}
function checkPaymentIntnetIsComplete(_x5, _x6) {
  return _checkPaymentIntnetIsComplete.apply(this, arguments);
}
function _checkPaymentIntnetIsComplete() {
  _checkPaymentIntnetIsComplete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(urlApi, invoice) {
    var url, fetchOptions, queryString, response;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          url = "stripe/payment_intent/invoice/complete/".concat(invoice.id, "/");
          fetchOptions = {
            method: 'GET',
            mode: 'cors'
          };
          queryString = new URLSearchParams({
            invoice_token: invoice.invoiceToken
          }).toString();
          _context3.next = 5;
          return fetch("".concat(urlApi).concat(url, "?").concat(queryString), fetchOptions);
        case 5:
          response = _context3.sent;
          if (response.ok) {
            _context3.next = 8;
            break;
          }
          throw new Error("Failed to check if payment intent is complete.");
        case 8:
          _context3.next = 10;
          return response.json();
        case 10:
          return _context3.abrupt("return", _context3.sent);
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _checkPaymentIntnetIsComplete.apply(this, arguments);
}
export function stripeCardFormSubmit(_x7, _x8, _x9, _x10) {
  return _stripeCardFormSubmit.apply(this, arguments);
}
function _stripeCardFormSubmit() {
  _stripeCardFormSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(urlApi, stripe, card, invoice) {
    var intent, stripePayment;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return createPaymentIntent(urlApi, invoice);
        case 3:
          intent = _context4.sent;
          _context4.next = 6;
          return stripe.confirmCardPayment(intent.stripeClientSecret, {
            payment_method: {
              card: card
            }
          });
        case 6:
          stripePayment = _context4.sent;
          if (!stripePayment.error) {
            _context4.next = 9;
            break;
          }
          throw new Error(stripePayment.error.message || 'Stripe connect unknown error');
        case 9:
          _context4.next = 11;
          return checkPaymentIntnetIsComplete(urlApi, invoice);
        case 11:
          return _context4.abrupt("return", _context4.sent);
        case 14:
          _context4.prev = 14;
          _context4.t0 = _context4["catch"](0);
          throw _context4.t0;
        case 17:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 14]]);
  }));
  return _stripeCardFormSubmit.apply(this, arguments);
}
export function stripePaymentButtonSubmit(_x11, _x12, _x13, _x14) {
  return _stripePaymentButtonSubmit.apply(this, arguments);
}
function _stripePaymentButtonSubmit() {
  _stripePaymentButtonSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(urlApi, stripe, invoice, paymentMethodEvent) {
    var complete, paymentMethod, intent, stripePayment;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          complete = paymentMethodEvent.complete, paymentMethod = paymentMethodEvent.paymentMethod;
          _context5.prev = 1;
          _context5.next = 4;
          return createPaymentIntent(urlApi, invoice);
        case 4:
          intent = _context5.sent;
          _context5.next = 7;
          return stripe.confirmCardPayment(intent.stripeClientSecret, {
            payment_method: paymentMethod.id
          }, {
            handleActions: false
          });
        case 7:
          stripePayment = _context5.sent;
          if (!stripePayment.error) {
            _context5.next = 10;
            break;
          }
          throw new Error(stripePayment.error.message || 'Stripe unknown error');
        case 10:
          complete('success');
          _context5.next = 13;
          return checkPaymentIntnetIsComplete(urlApi, invoice);
        case 13:
          return _context5.abrupt("return", _context5.sent);
        case 16:
          _context5.prev = 16;
          _context5.t0 = _context5["catch"](1);
          complete('fail');
          throw _context5.t0;
        case 20:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[1, 16]]);
  }));
  return _stripePaymentButtonSubmit.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,