'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import StripePaymentButtons from './StripePaymentButtons';
import { CardCvcElement, CardExpiryElement, CardNumberElement, Elements, useStripe, useElements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import { CARD_ELEMENT_OPTIONS } from './utils';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
function InnerForm(_ref) {
  var doStripePayment = _ref.doStripePayment,
    doStripePaymentRequestForButton = _ref.doStripePaymentRequestForButton,
    invoice = _ref.invoice,
    loadingStripePayment = _ref.loadingStripePayment,
    loadingStripePaymentButtons = _ref.loadingStripePaymentButtons,
    PaymentButton = _ref.PaymentButton,
    setLoadingStripePayment = _ref.setLoadingStripePayment;
  var inputClass = 'form-control p-t-8 stripe-form-control';
  var stripe = useStripe();
  var elements = useElements();
  function paymentStart(e) {
    var card = elements.getElement(CardNumberElement);
    setLoadingStripePayment(true);
    e.preventDefault();
    if (!stripe || !elements) {
      setLoadingStripePayment(false);
      return;
    }
    doStripePayment({
      card: card,
      invoice: invoice,
      stripe: stripe
    });
  }
  return /*#__PURE__*/_jsx(_Fragment, {
    children: loadingStripePaymentButtons ? /*#__PURE__*/_jsxs("div", {
      style: {
        alignItems: 'center'
      },
      children: [/*#__PURE__*/_jsx("div", {
        style: {
          alignItems: 'center',
          display: 'flex',
          justifyContent: 'center',
          marginBottom: '1rem',
          textAlign: 'center'
        },
        children: /*#__PURE__*/_jsx("div", {
          className: "spinner-merchi-small"
        })
      }), /*#__PURE__*/_jsx("p", {
        style: {
          fontSize: '14px',
          fontWeight: 600,
          textAlign: 'center'
        },
        children: "Processing payment"
      })]
    }) : /*#__PURE__*/_jsxs(_Fragment, {
      children: [!!(invoice && doStripePaymentRequestForButton) && /*#__PURE__*/_jsx(StripePaymentButtons, {
        doPaymentRequest: function doPaymentRequest(event) {
          return doStripePaymentRequestForButton(stripe, event);
        },
        invoice: invoice
      }), /*#__PURE__*/_jsxs("form", {
        onSubmit: paymentStart,
        children: [/*#__PURE__*/_jsx("label", {
          children: /*#__PURE__*/_jsx("strong", {
            children: "Card details"
          })
        }), /*#__PURE__*/_jsxs("div", {
          className: "d-flex flex-column gap-1",
          children: [/*#__PURE__*/_jsx(CardNumberElement, _objectSpread({
            className: inputClass
          }, CARD_ELEMENT_OPTIONS)), /*#__PURE__*/_jsx(CardExpiryElement, _objectSpread({
            className: inputClass
          }, CARD_ELEMENT_OPTIONS)), /*#__PURE__*/_jsx(CardCvcElement, _objectSpread({
            className: inputClass
          }, CARD_ELEMENT_OPTIONS)), /*#__PURE__*/_jsx(PaymentButton, {
            loading: loadingStripePayment
          })]
        })]
      })]
    })
  });
}
function FormStripeCardFields(_ref2) {
  var doStripePayment = _ref2.doStripePayment,
    doStripePaymentRequestForButton = _ref2.doStripePaymentRequestForButton,
    invoice = _ref2.invoice,
    loadingStripePayment = _ref2.loadingStripePayment,
    loadingStripePaymentButtons = _ref2.loadingStripePaymentButtons,
    PaymentButton = _ref2.PaymentButton,
    setLoadingStripePayment = _ref2.setLoadingStripePayment,
    stripePubKey = _ref2.stripePubKey;
  return stripePubKey ? /*#__PURE__*/_jsx(Elements, {
    stripe: loadStripe(stripePubKey),
    children: /*#__PURE__*/_jsx(InnerForm, {
      doStripePayment: doStripePayment,
      doStripePaymentRequestForButton: doStripePaymentRequestForButton,
      invoice: invoice,
      loadingStripePayment: loadingStripePayment,
      loadingStripePaymentButtons: loadingStripePaymentButtons,
      setLoadingStripePayment: setLoadingStripePayment,
      PaymentButton: PaymentButton
    })
  }) : /*#__PURE__*/_jsx("div", {
    style: {
      alignItems: 'center'
    },
    children: /*#__PURE__*/_jsx("div", {
      style: {
        alignItems: 'center',
        display: 'flex',
        justifyContent: 'center',
        marginBottom: '1rem',
        textAlign: 'center'
      },
      children: /*#__PURE__*/_jsx("div", {
        className: "spinner-merchi-small"
      })
    })
  });
}
export default FormStripeCardFields;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,