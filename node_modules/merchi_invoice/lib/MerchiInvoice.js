'use client';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useState } from 'react';
import Container from './Container';
import { ButtonPayInvoice } from './buttons';
import InvoiceInfo from './InvoiceInfo';
import TabTile from './TabTile';
import { IconsPayments } from './icons';
import SquareCard from './square/SquareCard';
import StripeCardForm from './stripe/StripeCardForm';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var payWithStripe = 'stripe-tab';
var payWithUtrust = 'utrust-tab';
export function defaultActivePaymentTab(invoice) {
  var acceptStripe = invoice.acceptStripe,
    acceptUtrust = invoice.acceptUtrust,
    unpaid = invoice.unpaid;
  var paid = !unpaid;
  var showStripe = !paid && acceptStripe;
  var showUtrust = !paid && acceptUtrust;
  return showStripe ? payWithStripe : showUtrust ? payWithUtrust : '';
}
function MerchiInvoice(_ref) {
  var _ref$alertErrorShow = _ref.alertErrorShow,
    alertErrorShow = _ref$alertErrorShow === void 0 ? console.error : _ref$alertErrorShow,
    _ref$classNameMerchiI = _ref.classNameMerchiInvoiceButtonDownloadInvoice,
    classNameMerchiInvoiceButtonDownloadInvoice = _ref$classNameMerchiI === void 0 ? 'btn btn-lg btn-primary' : _ref$classNameMerchiI,
    _ref$classNameMerchiI2 = _ref.classNameMerchiInvoiceButtonPayInvoice,
    classNameMerchiInvoiceButtonPayInvoice = _ref$classNameMerchiI2 === void 0 ? 'btn btn-lg btn-primary btn-block' : _ref$classNameMerchiI2,
    _ref$callbackCreditCa = _ref.callbackCreditCardPaymentSuccess,
    callbackCreditCardPaymentSuccess = _ref$callbackCreditCa === void 0 ? console.log : _ref$callbackCreditCa,
    _ref$invoice = _ref.invoice,
    invoice = _ref$invoice === void 0 ? {} : _ref$invoice,
    _ref$urlApi = _ref.urlApi,
    urlApi = _ref$urlApi === void 0 ? 'https://api.merchi.co/v6/' : _ref$urlApi;
  var _useState = useState(defaultActivePaymentTab(invoice) || payWithStripe),
    _useState2 = _slicedToArray(_useState, 2),
    activeTab = _useState2[0],
    setActiveTab = _useState2[1];
  var acceptSquare = invoice.acceptSquare,
    acceptStripe = invoice.acceptStripe,
    unpaid = invoice.unpaid;
  var paid = !unpaid;
  var PaymentButton = function PaymentButton(_ref2) {
    var loading = _ref2.loading;
    return /*#__PURE__*/_jsx(ButtonPayInvoice, {
      className: classNameMerchiInvoiceButtonPayInvoice,
      invoice: invoice,
      loading: loading
    });
  };
  return /*#__PURE__*/_jsxs("div", {
    className: "container-fluid",
    children: [/*#__PURE__*/_jsx(InvoiceInfo, {
      classNameMerchiInvoiceButtonDownloadInvoice: classNameMerchiInvoiceButtonDownloadInvoice,
      invoice: invoice,
      alertErrorShow: alertErrorShow,
      urlApi: urlApi
    }), !paid && /*#__PURE__*/_jsxs(_Fragment, {
      children: [/*#__PURE__*/_jsxs("div", {
        className: "m-auto pt-2",
        style: {
          maxWidth: 400
        },
        children: [!!acceptSquare && /*#__PURE__*/_jsx(Container, {
          description: "Secure credit card payments powered by Square.",
          children: /*#__PURE__*/_jsx(SquareCard, {
            alertErrorShow: alertErrorShow,
            invoice: invoice,
            callbackPaymentSuccess: callbackCreditCardPaymentSuccess,
            urlApi: urlApi
          })
        }), acceptStripe && /*#__PURE__*/_jsx(TabTile, {
          activeStyle: activeTab === payWithStripe,
          defaultValue: activeTab,
          name: payWithStripe,
          setTab: function setTab() {
            return setActiveTab(payWithStripe);
          },
          children: /*#__PURE__*/_jsx("div", {
            className: "merchi_invoice-container-icons",
            children: /*#__PURE__*/_jsx(IconsPayments, {})
          })
        })]
      }), !!(acceptStripe && payWithStripe === activeTab) && /*#__PURE__*/_jsx("div", {
        className: "w-100",
        children: /*#__PURE__*/_jsx(Container, {
          description: "Secure credit card payments powered by Stripe.",
          children: /*#__PURE__*/_jsx(StripeCardForm, {
            alertErrorShow: alertErrorShow,
            invoice: invoice,
            callbackStripePaymentSuccess: callbackCreditCardPaymentSuccess,
            PaymentButton: PaymentButton,
            urlApi: urlApi
          })
        })
      })]
    })]
  });
}
export default MerchiInvoice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,